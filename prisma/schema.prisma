generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum Role {
    User
    Admin
}

model User {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    email      String    @unique
    password   String?
    image      String?
    role       Role      @default(User)
    updated_at DateTime  @updatedAt
    created_at DateTime  @default(now())
    posts      Post[]
    comments   Comment[]
    likes      Like[]

    @@map("users")
}

model Post {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id     String    @db.ObjectId
    title       String
    description String?
    image       String?
    updated_at  DateTime  @updatedAt
    created_at  DateTime  @default(now())
    comments    Comment[]
    likes       Like[]

    @@map("posts")
}

model Comment {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id    String   @db.ObjectId
    post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
    post_id    String   @db.ObjectId
    comment    String
    ratings    Int      @default(0)
    updated_at DateTime @updatedAt
    created_at DateTime @default(now())

    @@map("comments")
}

model Like {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id    String   @db.ObjectId
    post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
    post_id    String   @db.ObjectId
    updated_at DateTime @updatedAt
    created_at DateTime @default(now())

    @@map("likes")
}
